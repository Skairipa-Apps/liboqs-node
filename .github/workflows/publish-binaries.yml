name: Build and Publish Binaries

on:
  release:
    types: [published]

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            arch: x64
            target: linux
            cross: false
          - os: ubuntu-latest
            arch: ia32
            target: linux
            cross: false
          - os: ubuntu-latest
            arch: arm64
            target: linux
            cross: true
          - os: ubuntu-latest
            arch: arm
            target: linux
            cross: true

          # Windows builds
          - os: windows-latest
            arch: x64
            target: win
            cross: false
          - os: windows-latest
            arch: ia32
            target: win
            cross: false
          - os: ubuntu-latest
            arch: arm64
            target: win
            cross: true

          # macOS builds
          - os: macos-latest
            arch: x64
            target: mac
            cross: false
          - os: macos-latest
            arch: arm64
            target: mac
            cross: false

    env:
      npm_config_arch: ${{ matrix.arch }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install build tools (macOS)
        if: runner.os == 'macOS'
        run: |
          xcode-select --install || echo "Xcode CLI tools already installed"
          brew update
          brew install ninja cmake

      - name: Install build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential g++ libc6-dev libc6-dev-i386 ninja-build cmake curl g++-13

      - name: Install Linux ARM cross compiler
        if: matrix.cross && matrix.arch == 'arm'
        run: sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

      - name: Install Linux ARM64 cross compiler
        if: matrix.cross && matrix.arch == 'arm64'
        run: sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Set CC/CXX environment variables
        if: matrix.cross
        run: |
          if [ "${{ matrix.arch }}" = "arm" ]; then
            echo "CC=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
            echo "CXX=arm-linux-gnueabihf-g++" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          fi

      - name: Install build tools (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y ninja cmake

      - name: Install Zig for cross-compilation
        if: ${{ matrix.cross }}
        run: |
          curl -L -o zig.tar.xz https://ziglang.org/download/0.11.0/zig-linux-x86_64-0.11.0.tar.xz
          tar xf zig.tar.xz
          echo "$PWD/zig-linux-x86_64-0.11.0" >> $GITHUB_PATH
          echo "ZIG_PATH=$PWD/zig-linux-x86_64-0.11.0" >> $GITHUB_ENV

      - name: Setup MSVC and build both architectures
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          function Setup-MsvcEnv {
            param($vcvarsBat)

            if (-not (Test-Path $vcvarsBat)) { throw "$vcvarsBat not found" }
            Write-Host "Running $vcvarsBat..."

            $envOutput = cmd /c "`"$vcvarsBat`" && set"
            $envVars = @{}
            foreach ($line in $envOutput) {
              if ($line -match "^(.*?)=(.*)$") {
                $name = $matches[1]
                $value = $matches[2]
                $envVars[$name] = $value
              }
            }
            return $envVars
          }

          Write-Host "Locating Visual Studio..."
          $vswherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $vsPath = & $vswherePath -latest -products * -requires Microsoft.Component.MSBuild -property installationPath
          if (-not $vsPath) { throw "Visual Studio not found" }

          # 64-bit setup
          $vcvars64 = Join-Path $vsPath "VC\Auxiliary\Build\vcvars64.bat"
          $env64 = Setup-MsvcEnv $vcvars64
          Write-Host "MSVC 64-bit environment set."

          foreach ($kv in $env64.GetEnumerator()) {
            [Environment]::SetEnvironmentVariable($kv.Key, $kv.Value, "Process")
          }

          Write-Host "Building for x64..."

          # 32-bit setup
          $vcvars32 = Join-Path $vsPath "VC\Auxiliary\Build\vcvars32.bat"
          $env32 = Setup-MsvcEnv $vcvars32
          Write-Host "MSVC 32-bit environment set."

          foreach ($kv in $env32.GetEnumerator()) {
            [Environment]::SetEnvironmentVariable($kv.Key, $kv.Value, "Process")
          }

          Write-Host "Building for x86..."

      - name: Install dependencies
        run: npm install

      - name: Build for ${{ matrix.os }} ${{ matrix.arch }}
        run: |
          if [[ "${{ matrix.cross }}" == "true" ]]; then
            if [[ "${{ matrix.target }}" == "win" ]]; then
              CC="zig cc -target $([[ "${{ matrix.arch }}" == "arm64" ]] && echo aarch64-windows || echo i386-windows)" \
              CXX="zig c++ -target $([[ "${{ matrix.arch }}" == "arm64" ]] && echo aarch64-windows || echo i386-windows)" \
              npm run build:package
            else
              CC="zig cc -target $([[ "${{ matrix.arch }}" == "arm64" ]] && echo aarch64-linux-musl || echo arm-linux-musleabihf)" \
              CXX="zig c++ -target $([[ "${{ matrix.arch }}" == "arm64" ]] && echo aarch64-linux-musl || echo arm-linux-musleabihf)" \
              npm run build:package
            fi
          else
            npm run build:package

  publish:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public
