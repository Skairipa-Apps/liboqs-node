name: Build and Publish Binaries

on:
  release:
    types: [published]

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            arch: x64
            target: linux
            cross: false
          - os: ubuntu-latest
            arch: ia32
            target: linux
            cross: false
          - os: ubuntu-latest
            arch: arm64
            target: linux
            cross: true
          - os: ubuntu-latest
            arch: arm
            target: linux
            cross: true

          # Windows builds
          - os: windows-latest
            arch: x64
            target: win
            cross: false
          - os: windows-latest
            arch: ia32
            target: win
            cross: false
          - os: ubuntu-latest
            arch: arm64
            target: win
            cross: true

          # macOS builds
          - os: macos-latest
            arch: x64
            target: mac
            cross: false
          - os: macos-latest
            arch: arm64
            target: mac
            cross: false

    env:
      npm_config_arch: ${{ matrix.arch }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install build tools (macOS)
        if: runner.os == 'macOS'
        run: |
          xcode-select --install || echo "Xcode CLI tools already installed"
          brew update
          brew install ninja cmake

      - name: Install build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          # Handle both real GitHub Actions and local act testing
          if command -v sudo >/dev/null 2>&1; then
            SUDO_CMD="sudo"
          else
            SUDO_CMD=""
            echo "Running without sudo (likely in act/container environment)"
            # In container environments, try to detect if we're running as root
            if [ "$(id -u)" = "0" ]; then
              echo "Running as root in container, no sudo needed"
            else
              echo "Warning: Not running as root and no sudo available"
            fi
          fi
          
          $SUDO_CMD apt-get update || true
          $SUDO_CMD apt-get install -y build-essential g++ libc6-dev ninja-build cmake curl || {
            echo "Failed to install all packages, trying minimal set..."
            $SUDO_CMD apt-get install -y build-essential cmake || {
              echo "Failed to install build tools, continuing anyway..."
            }
          }
          
          # Try to install g++-13 but don't fail if not available
          $SUDO_CMD apt-get install -y g++-13 || echo "g++-13 not available, using default g++"
          # Try to install libc6-dev-i386 but don't fail if not available
          $SUDO_CMD apt-get install -y libc6-dev-i386 || echo "libc6-dev-i386 not available, skipping 32-bit support"

      - name: Install Linux ARM cross compiler
        if: matrix.cross && matrix.arch == 'arm'
        run: |
          # Handle both real GitHub Actions and local act testing
          if command -v sudo >/dev/null 2>&1; then
            SUDO_CMD="sudo"
          else
            SUDO_CMD=""
            echo "Running without sudo (likely in act/container environment)"
          fi
          
          # Disable problematic security repositories for ARM
          $SUDO_CMD sed -i '/security\.ubuntu\.com.*armhf/d' /etc/apt/sources.list || true
          $SUDO_CMD sed -i '/archive\.ubuntu\.com.*armhf/d' /etc/apt/sources.list || true
          
          # Add Ubuntu Ports repository for ARM packages
          if command -v lsb_release >/dev/null 2>&1; then
            RELEASE=$(lsb_release -sc)
          else
            RELEASE="focal"  # Default fallback for containers
          fi
          
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ $RELEASE main restricted" | $SUDO_CMD tee -a /etc/apt/sources.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ $RELEASE-updates main restricted" | $SUDO_CMD tee -a /etc/apt/sources.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ $RELEASE universe multiverse" | $SUDO_CMD tee -a /etc/apt/sources.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ $RELEASE-updates universe multiverse" | $SUDO_CMD tee -a /etc/apt/sources.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ $RELEASE-backports main restricted universe multiverse" | $SUDO_CMD tee -a /etc/apt/sources.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ $RELEASE-security main restricted universe multiverse" | $SUDO_CMD tee -a /etc/apt/sources.list
          
          $SUDO_CMD dpkg --add-architecture armhf || echo "Failed to add armhf architecture"
          # Allow partial failures and continue with available packages
          $SUDO_CMD apt-get update || echo "Some repositories failed, continuing with available packages"
          $SUDO_CMD apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf || echo "Failed to install ARM cross-compiler"

      - name: Install Linux ARM64 cross compiler
        if: matrix.cross && matrix.arch == 'arm64'
        run: |
          # Handle both real GitHub Actions and local act testing
          if command -v sudo >/dev/null 2>&1; then
            SUDO_CMD="sudo"
          else
            SUDO_CMD=""
            echo "Running without sudo (likely in act/container environment)"
          fi
          
          # Disable problematic security repositories for ARM64
          $SUDO_CMD sed -i '/security\.ubuntu\.com.*arm64/d' /etc/apt/sources.list || true
          $SUDO_CMD sed -i '/archive\.ubuntu\.com.*arm64/d' /etc/apt/sources.list || true
          
          # Add Ubuntu Ports repository for ARM64 packages
          if command -v lsb_release >/dev/null 2>&1; then
            RELEASE=$(lsb_release -sc)
          else
            RELEASE="focal"  # Default fallback for containers
          fi
          
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $RELEASE main restricted" | $SUDO_CMD tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $RELEASE-updates main restricted" | $SUDO_CMD tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $RELEASE universe multiverse" | $SUDO_CMD tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $RELEASE-updates universe multiverse" | $SUDO_CMD tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $RELEASE-backports main restricted universe multiverse" | $SUDO_CMD tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $RELEASE-security main restricted universe multiverse" | $SUDO_CMD tee -a /etc/apt/sources.list
          
          $SUDO_CMD dpkg --add-architecture arm64 || echo "Failed to add arm64 architecture"
          # Allow partial failures and continue with available packages
          $SUDO_CMD apt-get update || echo "Some repositories failed, continuing with available packages"
          $SUDO_CMD apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu || echo "Failed to install ARM64 cross-compiler"
          # Install ARM64 OpenSSL development packages
          $SUDO_CMD apt-get install -y libssl-dev:arm64 || echo "Failed to install ARM64 OpenSSL, will use built-in crypto"

      - name: Set CC/CXX environment variables
        if: matrix.cross
        run: |
          if [ "${{ matrix.arch }}" = "arm" ]; then
            echo "CC=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
            echo "CXX=arm-linux-gnueabihf-g++" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          fi

      - name: Install build tools (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y ninja cmake

      - name: Install Zig for cross-compilation
        if: ${{ matrix.cross }}
        run: |
          curl -L -o zig.tar.xz https://ziglang.org/download/0.11.0/zig-linux-x86_64-0.11.0.tar.xz
          tar xf zig.tar.xz
          echo "$PWD/zig-linux-x86_64-0.11.0" >> $GITHUB_PATH
          echo "ZIG_PATH=$PWD/zig-linux-x86_64-0.11.0" >> $GITHUB_ENV

      - name: Setup MSVC and build both architectures
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          function Setup-MsvcEnv {
            param($vcvarsBat)

            if (-not (Test-Path $vcvarsBat)) { throw "$vcvarsBat not found" }
            Write-Host "Running $vcvarsBat..."

            $envOutput = cmd /c "`"$vcvarsBat`" && set"
            $envVars = @{}
            foreach ($line in $envOutput) {
              if ($line -match "^(.*?)=(.*)$") {
                $name = $matches[1]
                $value = $matches[2]
                $envVars[$name] = $value
              }
            }
            return $envVars
          }

          Write-Host "Locating Visual Studio..."
          $vswherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $vsPath = & $vswherePath -latest -products * -requires Microsoft.Component.MSBuild -property installationPath
          if (-not $vsPath) { throw "Visual Studio not found" }

          # 64-bit setup
          $vcvars64 = Join-Path $vsPath "VC\Auxiliary\Build\vcvars64.bat"
          $env64 = Setup-MsvcEnv $vcvars64
          Write-Host "MSVC 64-bit environment set."

          foreach ($kv in $env64.GetEnumerator()) {
            [Environment]::SetEnvironmentVariable($kv.Key, $kv.Value, "Process")
          }

          Write-Host "Building for x64..."

          # 32-bit setup
          $vcvars32 = Join-Path $vsPath "VC\Auxiliary\Build\vcvars32.bat"
          $env32 = Setup-MsvcEnv $vcvars32
          Write-Host "MSVC 32-bit environment set."

          foreach ($kv in $env32.GetEnumerator()) {
            [Environment]::SetEnvironmentVariable($kv.Key, $kv.Value, "Process")
          }

          Write-Host "Building for x86..."

      - name: Install dependencies
        env:
          OQS_PERMIT_UNSUPPORTED_ARCHITECTURE: ON
          # Force disable OpenSSL for cross-compilation
          OQS_USE_OPENSSL: "${{ matrix.cross == true && 'OFF' || 'ON' }}"
        run: |
          if [[ "${{ matrix.arch }}" == "arm" || "${{ matrix.arch }}" == "arm64" ]]; then
            CC="zig cc -target $([[ "${{ matrix.arch }}" == "arm64" ]] && echo aarch64-linux-musl || echo arm-linux-musleabihf)" \
            CXX="zig c++ -target $([[ "${{ matrix.arch }}" == "arm64" ]] && echo aarch64-linux-musl || echo arm-linux-musleabihf)" \
            npm install -g rimraf
          fi
          
          # Check for container environment (act) or ARM runner architecture
          if [[ "${{ runner.arch }}" == "ARM" || "${{ runner.arch }}" == "ARM64" || "$ACT" == "true" ]]; then
            echo "Container or ARM environment detected - disabling advanced CPU instructions"
            export CMAKE_FLAGS="-DOQS_ENABLE_AESNI=OFF -DOQS_ENABLE_AVX=OFF -DOQS_ENABLE_AVX2=OFF -DOQS_ENABLE_AVX512=OFF"
            echo "CMAKE_FLAGS=${CMAKE_FLAGS}" >> $GITHUB_ENV
          fi
          
          # Set up cross-compilation environment - disable OpenSSL to avoid dependency issues
          if [[ "${{ matrix.cross }}" == "true" ]]; then
            export OQS_USE_OPENSSL=OFF
            export CMAKE_FLAGS="${CMAKE_FLAGS} -DOQS_USE_OPENSSL=OFF"
            echo "Cross-compilation detected - disabling OpenSSL to use built-in crypto"
            echo "OQS_USE_OPENSSL=OFF" >> $GITHUB_ENV
          fi
          npm install

      - name: Build for ${{ matrix.os }} ${{ matrix.arch }}
        run: |
          if [[ "${{ matrix.cross }}" == "true" ]]; then
            if [[ "${{ matrix.target }}" == "win" ]]; then
              CC="zig cc -target $([[ "${{ matrix.arch }}" == "arm64" ]] && echo aarch64-windows || echo i386-windows)" \
              CXX="zig c++ -target $([[ "${{ matrix.arch }}" == "arm64" ]] && echo aarch64-windows || echo i386-windows)" \
              npm run build:package
            else
              CC="zig cc -target $([[ "${{ matrix.arch }}" == "arm64" ]] && echo aarch64-linux-musl || echo arm-linux-musleabihf)" \
              CXX="zig c++ -target $([[ "${{ matrix.arch }}" == "arm64" ]] && echo aarch64-linux-musl || echo arm-linux-musleabihf)" \
              npm run build:package
            fi
          else
            npm run build:package
          fi

  publish:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public
